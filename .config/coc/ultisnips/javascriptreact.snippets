# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<${2}>()
#		public readonly ${1/^_(.*)/${1}/}: Event<${2}> = this.${1}.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt


#===== General JS =====#
snippet cl
console.log(${1})
endsnippet

snippet exp
export default ${1}
endsnippet

snippet for
for (let ${1:i} = 0; ${1} <= ${2}; ${1}++) {
	${3}
}
endsnippet

snippet func
const ${1} = (${2}) => {
	${3}
}
endsnippet

snippet if
if (${1}) {
	${2}
}
endsnippet

snippet imp
import ${1} from '${2}';
endsnippet

snippet impexp
import ${1} from './${1}';
export default ${1};
endsnippet

snippet switch
switch (${1}) {
	case ${2}:
		${3}
		break;
	default: return ${4:state};
}
endsnippet


#===== React / Redux =====#
snippet act
const ${1} = (${2}) => ({
	type: actionTypes.${3},
	payload: {
		${4:${2}}
	}
});
${0}
endsnippet

snippet comp
class ${1} extends React.Component {
	render() {
		return (

		);
	}
}
endsnippet

snippet connect
export default connect(${1:mapStateToProps}${2:, mapDispatchToProps})(${3});
endsnippet

snippet react
import React from 'react';
endsnippet

snippet reducer
const ${1}Reducer = (state = ${2}, action) => {
	switch (action.type) {
		case actionTypes.${3}:
			return action.payload.${4};
		default: return state;
	}
}
${0}
endsnippet

snippet type
const ${1} = '${1}';
endsnippet

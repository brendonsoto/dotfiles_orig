" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible


"""""""""""""""""""""
"		Plugins
"""""""""""""""""""""

" Vim-Plug - Manage Plugins
call plug#begin('~/.vim/plugged')

" Colors!!
Plug 'liuchengxu/space-vim-dark'
Plug 'morhetz/gruvbox'

" CSS
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'html', 'javascript', 'javascript.jsx'] }

" External plugin support
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

" Haskell
Plug 'autozimu/LanguageClient-neovim', {
  \ 'for': ['javascript', 'javascript.jsx', 'haskell'],
  \ 'branch': 'next',
  \ 'do': './install.sh'
  \}

" Haskell
Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }

" Javascript & related
Plug 'mxw/vim-jsx', { 'for': ['HTML', 'javascript', 'javascript.jsx'] }
Plug 'pangloss/vim-javascript', { 'for': ['HTML', 'javascript', 'javascript.jsx', 'typescript'] }
Plug 'elzr/vim-json', { 'for': ['json', 'javascript'] }

" Markdown
Plug 'junegunn/goyo.vim', { 'for': ['markdown', 'vimwiki'] }

" Web general
Plug 'tmhedberg/matchit', { 'for': ['HTML', 'javascript', 'javascript.jsx'] }
Plug 'mattn/emmet-vim', { 'for': ['HTML', 'javascript', 'javascript.jsx'] }

" Vim general
Plug 'easymotion/vim-easymotion'
Plug 'fholgado/minibufexpl.vim'
Plug 'godlygeek/tabular'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'SirVer/ultisnips'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'valloric/youcompleteme', { 'do': 'python3 install.py' }
Plug 'vimwiki/vimwiki'
Plug 'w0rp/ale'

call plug#end()


"""""""""""""""""""""
"		Autocommands
"""""""""""""""""""""

" Enable auto sourcing vimrc on save
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost vimrc source %

" Disable auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Jump to last known position in a file after opening
:au BufReadPost *
 \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
 \ |   exe "normal! g`\""
 \ | endif

" Set JSON-like files to use json syntax highlighting
autocmd BufRead,BufNewFile *.json,.eslintrc,.babelrc set filetype=json

" Set .Xmonad-related files to use Haskell syntax highlighting
autocmd BufRead,BufNewFile .xmobarrc set filetype=haskell

" Highlight TODO, FIXME, NOTE
autocmd Syntax * call matchadd('todo', '\W\zs\(TODO\|FIXME\|XXX\)')
autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\)')

" Set Rainbow Parenthesis to always be active
augroup rainbow
  autocmd!
  autocmd FileType c,cpp,java,javascript,javascript.jsx,json,php,python,ruby,sql RainbowParentheses
augroup END

" Fugitive - auto-clean fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete


"""""""""""""""""""""
"		General Settings
"""""""""""""""""""""

set termguicolors
filetype plugin indent on " Enable file detection and load any plugins for them

" Colorscheme
syntax enable
let g:gruvbox_italic=1
colorscheme gruvbox

set autoindent " allow autoindent by default
set background=dark
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set clipboard+=unnamedplus
set diffopt=filler,vertical " Diff settings
set expandtab " maintains # of spaces for a tab in insert mode
set hidden " don't have to write before opening new buffer
set history=50 " command line history
set hlsearch " highlight search terms
" modified search based off of gruvbox for readability
hi Search cterm=inverse ctermfg=143 ctermbg=234 gui=bold guifg=#1d2021 guibg=#b8bb26
set ignorecase " ignore case when searching
set inccommand=split " show changes in a split window for search and replace
set incsearch " show matches as you type
set linebreak " enable word-break without inserting an EOL character
set nobackup " no backups
set noswapfile " no backups
set number " display line number
set omnifunc=syntaxcomplete#Complete " Enable omnicompletion
set path=$PWD/** " Find from current directory
set ruler " show the cursor position all the time
set shiftwidth=2 " spaces for auto indent
set showcmd " display incomplete commands
set showmatch " show matching parenthesis
set smartcase " search is case-insensitive when keyword is all lowercase
set tabstop=2 " set tab to 2 spaces
set undodir=$HOME/.vim/undo " undo file for work
set undofile " Save undo's after file closes
set undolevels=1000 " How many undos
set undoreload=1000 " How many lines to save for undo

" enable mouse for scrolling
if has("mouse")
	set mouse=a
endif


"""""""""""""""""""""
"		Mappings
" TODO Move plugin mappings to be with plugin configs
"""""""""""""""""""""

" MapLeader
let mapleader = "\<Space>"

" Easy open file from vim
map <silent> <F12> :!open %<CR>

" Easy show relative path
map <Leader>F :echo expand("%")<CR>

" Easy open, close, and save
nnoremap <Leader>e :e<Space>
nnoremap <Leader>v :vs
nnoremap <Leader>Q :qa<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>

" Easy window Navigation
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l
nnoremap <Leader>0 <C-w>t
nnoremap <Leader>9 <C-w>b

" Easy copy & paste
map <Leader>y "+y
map <Leader>p "+p
map <Leader>Y ggv<S-g>$"*y

" Move line by line even when the line is wrapped
map j gj
map k gk

" Buffer switching
nnoremap <Leader>] :bn<CR>
nnoremap <Leader>[ :bp<CR>

" Remove trailing whitespace
nmap <Leader>W :%s/ \+$//<CR>

" miniBufExplr
nnoremap <Leader>b :MBEToggle<CR>

" NerdTree
nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>f :NERDTreeFocus<CR>

" Easy window splitting
map <Leader>s :split<CR>
map <Leader>= <C-w>=

" Easy tabs
map <Leader>t :tab split<CR>

" Easy remove highlighting
map <Leader>/ :nohl<CR>

" Easy diffupdate
nnoremap du :diffupdate<CR>

" Easy search for visually selected text
vnoremap // y/<C-R>"<CR>

" Ale
nmap <silent> [j <Plug>(ale_previous_wrap)
nmap <silent> ]j <Plug>(ale_next_wrap)
nmap <Leader>? <Plug>(ale_detail)

" FZF
nnoremap <Leader>a :Rg<CR>
nnoremap <C-p> :Files<CR>

" JDaddy
map <Leader>J gqaj

" Tabular
nmap <Leader>T= :Tabularize /=<CR>
vmap <Leader>T= :Tabularize /=<CR>
nmap <Leader>T: :Tabularize /:\zs<CR>
vmap <Leader>T: :Tabularize /:\zs<CR>

" VimWiki
nmap <Leader>wn <Plug>VimwikiNextLink
nmap <Leader>wp <Plug>VimwikiPrevLink


"""""""""""""""""""""
"		Tools
"""""""""""""""""""""

" Ale
let g:ale_linters = {
  \ 'javascript': ['eslint'],
  \}
let g:ale_fixers = {
  \ 'javascript': ['prettier']
  \}

" Emmet
let g:user_emmet_settings = {
  \'javascript.jsx': {
  \   'extends': 'jsx'
  \}
  \}

" FZF
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" JSX
let g:jsx_ext_required = 0

" Lightline
set laststatus=2
let g:lightline = {
  \ 'active': {
  \   'right':  [ [ 'lineinfo' ],
  \               [ 'percent' ] ],
  \   'left': [ [ 'mode', 'paste', 'relativepath' ],
  \             [ 'fugitive', 'readonly', 'modified' ] ]
  \ },
  \ 'colorscheme': 'gruvbox',
  \ 'component_function': {
  \   'fugitive': 'LightLineFugitive',
  \   'readonly': 'LightLineReadonly',
  \   'modified': 'LightLineModified'
  \ }
  \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "тнд"
  else
    return ""
  endif
endfunction

function! LightLineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

" LSP - LanguageServerProtocol, not LumpySpacePrincess
" kudos to https://fortes.com/2017/language-server-neovim/
let g:LanguageClient_autoStart = 1
let g:LanguageClient_loggingFile = '/tmp/langClient.log'
let g:LanguageClient_loggingLevel = 'ERROR'
let g:LanguageClient_serverStderr = '/tmp/langClient_serverErr.log'
let g:LanguageClient_serverCommands = {}

" JS/TS detection
if executable('javascript-typescript-stdio')
  let g:LanguageClient_serverCommands['javascript'] = ['javascript-typescript-stdio']
  let g:LanguageClient_serverCommands['javascript.jsx'] = ['javascript-typescript-stdio']
  autocmd FileType javascript setlocal omnifunc=LanguageClient#complete
  autocmd FileType javascript.jsx setlocal omnifunc=LanguageClient#complete
else
  echo 'javascript-typescript-stdio not installed!\n'
endif

" Haskell detection -- NOTE Disabling for now since it uses up WAY too much cpu power
if executable('hie')
  let g:LanguageClient_serverCommands['haskell'] = ['hie-wrapper']
else
  echo 'haskell-ide-engine not installed!\n'
endif

nnoremap <leader>gh :call LanguageClient_textDocument_hover()<CR>
nnoremap <leader>gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <leader>gr :call LanguageClient_textDocument_rename()<CR>

" Rainbow Parenthesis
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

" SQL -- Reset the Omni Key so I can use CTRL-[ to exit insert mode
let g:ftplugin_sql_omni_key = '<C-j>'

" UltiSnips
let g:UltiSnipsSnippetsDir='~/.vim/ultiSnips'
let g:UltiSnipsSnippetsDirectories=['~/.vim/ultiSnips']
let g:UltiSnipsExpandTrigger='<c-e>'

" Vimwiki
let g:vimwiki_list = [
  \ {'path': '~/vimwiki'},
  \ {'path': '~/dotfiles/my_wiki'}
  \]

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1

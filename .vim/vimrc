" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible


"""""""""""""""""""""
"		Plugins
"""""""""""""""""""""

" Vim-Plug - Manage Plugins
call plug#begin('~/.vim/plugged')

" Colors!!
" Plug 'fenetikm/falcon'
" Plug 'joshdick/onedark.vim'
" Plug 'liuchengxu/space-vim-dark'
Plug 'morhetz/gruvbox'

" External plugin support
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Multi-lang
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'w0rp/ale'

" Haskell
Plug 'neovimhaskell/haskell-vim'

" Javascript
Plug 'pangloss/vim-javascript'

"JSON
Plug 'elzr/vim-json'

" JSX
Plug 'mxw/vim-jsx'

" Markdown
Plug 'dkarter/bullets.vim'
Plug 'junegunn/goyo.vim'

" TypeScript
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" Web general
Plug 'mattn/emmet-vim'
Plug 'tmhedberg/matchit'

" Vim general
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'francoiscabrol/ranger.vim'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'majutsushi/tagbar'
Plug 'mhinz/vim-startify'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vimwiki/vimwiki'

" Below is needed with Ranger
Plug 'rbgrouleff/bclose.vim'

call plug#end()


"""""""""""""""""""""
"		General Settings
"""""""""""""""""""""

" color
set termguicolors
if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

filetype plugin indent on " Enable file detection and load any plugins for them

" Colorscheme
syntax enable
" Gruvbox specifics
let g:gruvbox_italic=1
" modified search based off of gruvbox for readability
hi Search cterm=inverse ctermfg=143 ctermbg=234 gui=bold guifg=#1d2021 guibg=#b8bb26
colorscheme gruvbox

set autoindent " allow autoindent by default
set background=dark
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set clipboard+=unnamedplus " Use the clipboard register + in addition to the default
" Use a popup menu, even if there's one match, show extra info, do not auto-select or auto-insert
set completeopt=menu,menuone,preview,noselect,noinsert
set diffopt=filler,vertical " Diff settings
set expandtab " maintains # of spaces for a tab in insert mode
set hidden " don't have to write before opening new buffer
set history=50 " command line history
set hlsearch " highlight search terms
set ignorecase " ignore case when searching
set incsearch " show matches as you type
set linebreak " enable word-break without inserting an EOL character
set nobackup " no backups
set nowritebackup " no backups
set nomodeline " For a security thing - https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set noswapfile " no backups
set number " display line number
set omnifunc=syntaxcomplete#Complete " Enable omnicompletion
set path=$PWD/** " Find from current directory
set ruler " show the cursor position all the time
set shiftwidth=2 " spaces for auto indent
set showcmd " display incomplete commands
set showmatch " show matching parenthesis
set smartcase " search is case-insensitive when keyword is all lowercase
set tabstop=2 " set tab to 2 spaces
set undodir=$HOME/.vim/undo " undo file for work
set undofile " Save undo's after file closes
set undolevels=1000 " How many undos
set undoreload=1000 " How many lines to save for undo
set updatetime=300

" enable mouse for scrolling
if has("mouse")
	set mouse=a
endif

" nvim specific stuff
if (has("nvim"))
  set inccommand=split " show changes in a split window for search and replace
endif


"""""""""""""""""""""
"		Mappings
"""""""""""""""""""""

" MapLeader
let mapleader = "\<Space>"

" Easy open file from vim
map <silent> <F12> :!open %<CR>

" Easy open, close, and save
nnoremap <Leader>e :e<Space>
nnoremap <Leader>v :vs
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :qa<CR>

" Easy window Navigation
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

" Easy copy & paste
map <Leader>y "+y
map <Leader>p "+p
map <Leader>Y ggv<S-g>$"*y

" Move line by line even when the line is wrapped
map j gj
map k gk

" Easy window splitting
map <Leader>s :split<CR>

" Easy tabs
map <Leader>ts :tab split<CR>

" Easy remove highlighting
map <Leader>/ :nohl<CR>

" Easy diffupdate
nnoremap du :diffupdate<CR>

" Easy search for visually selected text
vnoremap // y/<C-R>"<CR>


"""""""""""""""""""""
"		Autocommands
"""""""""""""""""""""

" Enable auto sourcing vimrc on save
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost vimrc source %

" Disable auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Jump to last known position in a file after opening
:au BufReadPost *
 \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
 \ |   exe "normal! g`\""
 \ | endif

" Highlight TODO, FIXME, NOTE
autocmd Syntax * call matchadd('todo', '\W\zs\(TODO\|FIXME\|XXX\)')
autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\)')


"""""""""""""""""""""
"		Language specific stuff
"""""""""""""""""""""

" Set .Xmonad-related files to use Haskell syntax highlighting
autocmd BufRead,BufNewFile .xmobarrc set filetype=haskell

" Set JSON-like files to use json syntax highlighting
autocmd BufRead,BufNewFile *.json,.eslintrc,.babelrc set filetype=json

" Javascript / JSX
autocmd FileType javascript,javascript.jsx let b:dispatch = 'npx jest % --colors'

" JSX
let g:jsx_ext_required = 0

" SQL -- Reset the Omni Key so I can use CTRL-[ to exit insert mode
let g:ftplugin_sql_omni_key = '<C-j>'


"""""""""""""""""""""
"		Tools
"""""""""""""""""""""

" Ale
let g:ale_linters = {
  \ 'cucumber': [],
  \ 'javascript': ['eslint', 'tsserver'],
  \ 'typescript': ['eslint', 'tsserver'],
  \}
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'javascript': ['prettier']
      \}
let g:ale_fix_on_save = 1
" let g:ale_completion_enabled = 1
nmap [j <Plug>(ale_previous_wrap)
nmap ]j <Plug>(ale_next_wrap)
nmap <Leader>? <Plug>(ale_detail)
nmap <Leader>d <Plug>(ale_go_to_definition)
nmap <Leader>r <Plug>(ale_find_references)

" Coc
" Coc-Snippets
imap <C-e> <Plug>(coc-snippets-expand)
let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

" Emmet
let g:user_emmet_settings = {
  \'javascript.jsx': {
  \   'extends': 'jsx'
  \}
  \}

" Fugitive - auto-clean fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete

" FZF
nnoremap <Leader>a :Rg<CR>
nnoremap <Leader>B :Buffers<CR>
nnoremap <C-p> :Files<CR>

" Lightline
set laststatus=2
let g:lightline = {
  \ 'active': {
  \   'right':  [ [ 'lineinfo' ],
  \               [ 'percent' ] ],
  \   'left': [ [ 'mode', 'paste', 'relativepath' ],
  \             [ 'fugitive', 'readonly', 'modified' ] ]
  \ },
  \ 'colorscheme': 'one',
  \ 'component_function': {
  \   'fugitive': 'LightLineFugitive',
  \   'readonly': 'LightLineReadonly',
  \   'modified': 'LightLineModified'
  \ }
  \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "тнд"
  else
    return ""
  endif
endfunction

function! LightLineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

" Rainbow Parenthesis
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

" Ranger
let g:ranger_command_override = 'ranger --cmd "set show_hidden=true"'
let g:ranger_replace_netrw = 1

" Startify
let g:startify_bookmarks = [
      \ {'w': '~/vimwiki/index.md'},
      \ {'m': '~/dotfiles/my_wiki/index.md'},
      \ {'z': '~/dotfiles/meine_zettlekasten/index.md'},
      \ ]

" Tagbar
nmap <Leader>tt :TagbarToggle<CR>
let g:tagbar_type_typescript = {
  \ 'ctagsbin' : 'tstags',
  \ 'ctagsargs' : '-f-',
  \ 'kinds': [
  \ 'e:enums:0:1',
  \ 'f:function:0:1',
  \ 't:typealias:0:1',
  \ 'M:Module:0:1',
  \ 'I:import:0:1',
  \ 'i:interface:0:1',
  \ 'C:class:0:1',
  \ 'm:method:0:1',
  \ 'p:property:0:1',
  \ 'v:variable:0:1',
  \ 'c:const:0:1',
  \ ],
  \ 'sort' : 0
  \ }

" Vimwiki
let g:vimwiki_list = [
      \ {'path': '~/vimwiki', 'syntax': 'markdown', 'ext': '.md'},
      \ {'path': '~/dotfiles/my_wiki', 'syntax': 'markdown', 'ext': '.md'},
      \ {'path': '~/dotfiles/meine_zettlekasten', 'syntax': 'markdown', 'ext': '.md', 'auto_tags': 1}
      \]
let g:vimwiki_global_ext = 0
let g:vimwiki_ex2syntaqx = {'.md': 'markdown'}
nmap <Leader>x <Plug>VimwikiToggleListItem

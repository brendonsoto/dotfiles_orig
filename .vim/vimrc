" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible


"""""""""""""""""""""
"		Plugins
"""""""""""""""""""""

" Vim-Plug - Manage Plugins
call plug#begin('~/.vim/plugged')

" Colors!!
" Plug 'liuchengxu/space-vim-dark'
Plug 'morhetz/gruvbox'
" Plug 'fenetikm/falcon'
" Plug 'joshdick/onedark.vim'

" External plugin support
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

" Multi-lang
Plug 'godlygeek/tabular', { 'for': ['haskell', 'javascript', 'javascript.jsx'] }
Plug 'sirver/UltiSnips', { 'for': ['haskell', 'html', 'javascript', 'javascript.jsx'] } 
Plug 'w0rp/ale'

" Elm
Plug 'ElmCast/elm-vim', { 'for': 'elm' }

" Haskell
Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }

" Javascript & related
Plug 'elzr/vim-json', { 'for': ['json', 'javascript'] }
Plug 'mxw/vim-jsx', { 'for': ['HTML', 'javascript', 'javascript.jsx'] }
Plug 'pangloss/vim-javascript', { 'for': ['HTML', 'javascript', 'javascript.jsx', 'typescript'] }
Plug 'tpope/vim-jdaddy', { 'for': 'json' }

" Markdown
Plug 'junegunn/goyo.vim', { 'for': ['markdown', 'vimwiki'] }

" Web general
Plug 'mattn/emmet-vim', { 'for': ['html', 'javascript', 'javascript.jsx'] }
Plug 'tmhedberg/matchit', { 'for': ['html', 'javascript', 'javascript.jsx'] }

" Vim general
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'easymotion/vim-easymotion'
Plug 'francoiscabrol/ranger.vim'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vimwiki/vimwiki'

" Below is needed with Ranger
Plug 'rbgrouleff/bclose.vim'

call plug#end()


"""""""""""""""""""""
"		General Settings
"""""""""""""""""""""

" color "
set termguicolors
if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

filetype plugin indent on " Enable file detection and load any plugins for them

" Colorscheme
syntax enable
" Gruvbox specifics
let g:gruvbox_italic=1
" modified search based off of gruvbox for readability
hi Search cterm=inverse ctermfg=143 ctermbg=234 gui=bold guifg=#1d2021 guibg=#b8bb26
colorscheme gruvbox

set autoindent " allow autoindent by default
set background=dark
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set clipboard+=unnamedplus
set completeopt=menu,preview,noinsert
set diffopt=filler,vertical " Diff settings
set expandtab " maintains # of spaces for a tab in insert mode
set hidden " don't have to write before opening new buffer
set history=50 " command line history
set hlsearch " highlight search terms
set ignorecase " ignore case when searching
set incsearch " show matches as you type
set linebreak " enable word-break without inserting an EOL character
set nobackup " no backups
set nomodeline " For a security thing - https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set noswapfile " no backups
set number " display line number
set omnifunc=syntaxcomplete#Complete " Enable omnicompletion
set path=$PWD/** " Find from current directory
set ruler " show the cursor position all the time
set shiftwidth=2 " spaces for auto indent
set showcmd " display incomplete commands
set showmatch " show matching parenthesis
set smartcase " search is case-insensitive when keyword is all lowercase
set tabstop=2 " set tab to 2 spaces
set undodir=$HOME/.vim/undo " undo file for work
set undofile " Save undo's after file closes
set undolevels=1000 " How many undos
set undoreload=1000 " How many lines to save for undo

" enable mouse for scrolling
if has("mouse")
	set mouse=a
endif

" nvim specific stuff
if (has("nvim"))
  set inccommand=split " show changes in a split window for search and replace
endif


"""""""""""""""""""""
"		Mappings
"""""""""""""""""""""

" MapLeader
let mapleader = "\<Space>"

" Easy open file from vim
map <silent> <F12> :!open %<CR>

" Easy open, close, and save
nnoremap <Leader>e :e<Space>
nnoremap <Leader>v :vs
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :qa<CR>

" Easy window Navigation
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

" Easy copy & paste
map <Leader>y "+y
map <Leader>p "+p
map <Leader>Y ggv<S-g>$"*y

" Move line by line even when the line is wrapped
map j gj
map k gk

" Easy window splitting
map <Leader>s :split<CR>

" Easy tabs
map <Leader>t :tab split<CR>

" Easy remove highlighting
map <Leader>/ :nohl<CR>

" Easy diffupdate
nnoremap du :diffupdate<CR>

" Easy search for visually selected text
vnoremap // y/<C-R>"<CR>


"""""""""""""""""""""
"		Autocommands
"""""""""""""""""""""

" Enable auto sourcing vimrc on save
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost vimrc source %

" Disable auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Jump to last known position in a file after opening
:au BufReadPost *
 \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
 \ |   exe "normal! g`\""
 \ | endif

" Highlight TODO, FIXME, NOTE
autocmd Syntax * call matchadd('todo', '\W\zs\(TODO\|FIXME\|XXX\)')
autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\)')


"""""""""""""""""""""
"		Language specific stuff
"""""""""""""""""""""

" Set .Xmonad-related files to use Haskell syntax highlighting
autocmd BufRead,BufNewFile .xmobarrc set filetype=haskell

" Set JSON-like files to use json syntax highlighting
autocmd BufRead,BufNewFile *.json,.eslintrc,.babelrc set filetype=json

" Javascript / JSX
autocmd FileType javascript,javascript.jsx let b:dispatch = 'npx jest % --colors'

" JSX
let g:jsx_ext_required = 0

" SQL -- Reset the Omni Key so I can use CTRL-[ to exit insert mode
let g:ftplugin_sql_omni_key = '<C-j>'


"""""""""""""""""""""
"		Tools
"""""""""""""""""""""

" Ale
let g:ale_linters = {
  \ 'javascript': ['eslint', 'tsserver'],
  \}
let g:ale_lint_on_text_changed = 'normal'
let g:ale_completion_enabled = 1
nmap [j <Plug>(ale_previous_wrap)
nmap ]j <Plug>(ale_next_wrap)
nmap <Leader>? <Plug>(ale_detail)
nmap <Leader>d <Plug>(ale_go_to_definition)
nmap <Leader>r <Plug>(ale_find_references)

" Deoplete
let g:deoplete#enable_at_startup = 1
call deoplete#custom#option('smart_case', v:true)

" Elm - elm-vim
let g:elm_jump_to_error = 0
let g:elm_make_output_file = 'elm.js'
let g:elm_make_show_warnings = 0
let g:elm_syntastic_show_warnings = 0
let g:elm_browser_command = ''
let g:elm_detailed_complete = 0
let g:elm_format_autosave = 1
let g:elm_format_fail_silently = 0
let g:elm_setup_keybindings = 1

" Emmet
let g:user_emmet_settings = {
  \'javascript.jsx': {
  \   'extends': 'jsx'
  \}
  \}

" Fugitive - auto-clean fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete

" FZF
nnoremap <Leader>a :Rg<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <C-p> :Files<CR>

" Lightline
set laststatus=2
let g:lightline = {
  \ 'active': {
  \   'right':  [ [ 'lineinfo' ],
  \               [ 'percent' ] ],
  \   'left': [ [ 'mode', 'paste', 'relativepath' ],
  \             [ 'fugitive', 'readonly', 'modified' ] ]
  \ },
  \ 'colorscheme': 'one',
  \ 'component_function': {
  \   'fugitive': 'LightLineFugitive',
  \   'readonly': 'LightLineReadonly',
  \   'modified': 'LightLineModified'
  \ }
  \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "тнд"
  else
    return ""
  endif
endfunction

function! LightLineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

" Rainbow Parenthesis
" Set Rainbow Parenthesis to always be active
augroup rainbow
  autocmd!
  autocmd FileType c,cpp,java,javascript,javascript.jsx,json,php,python,ruby,sql RainbowParentheses
augroup END
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

" Ranger
let g:ranger_command_override = 'ranger --cmd "set show_hidden=true"'
let g:ranger_replace_netrw = 1

" Tabular
nmap <Leader>T= :Tabularize /=<CR>
vmap <Leader>T= :Tabularize /=<CR>
nmap <Leader>T: :Tabularize /:\zs<CR>
vmap <Leader>T: :Tabularize /:\zs<CR>

" UltiSnips
let g:UltiSnipsSnippetsDir='~/.vim/ultiSnips'
let g:UltiSnipsSnippetsDirectories=['~/.vim/ultiSnips']
let g:UltiSnipsExpandTrigger='<c-e>'

" Vimwiki
let g:vimwiki_list = [
  \ {'path': '~/vimwiki'},
  \ {'path': '~/dotfiles/my_wiki'}
  \]
nmap <Leader>x <Plug>VimwikiToggleListItem

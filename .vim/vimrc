" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible


"""""""""""""""""""""
"		Plugins
"""""""""""""""""""""

" Vim-Plug - Manage Plugins
call plug#begin('~/.vim/plugged')

" Colors!!
" Plug 'fenetikm/falcon'
" Plug 'joshdick/onedark.vim'
" Plug 'liuchengxu/space-vim-dark'
Plug 'morhetz/gruvbox'

" Colors for Langs -- alphabetized by lang
Plug 'hail2u/vim-css3-syntax'
Plug 'neovimhaskell/haskell-vim'
Plug 'sheerun/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown'
Plug 'LnL7/vim-nix'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'leafgarland/typescript-vim'
Plug 'posva/vim-vue'

" External plugin support
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Multi-lang
Plug 'dense-analysis/ale'
Plug 'tpope/vim-endwise'
" Plug 'SirVer/ultisnips'
Plug 'jiangmiao/auto-pairs'
Plug 'adelarsq/vim-matchit'

Plug 'neovim/nvim-lspconfig'

" Plug 'prabirshrestha/asyncomplete.vim'
" Plug 'prabirshrestha/vim-lsp'
" Plug 'prabirshrestha/asyncomplete-lsp.vim'
" Plug 'mattn/vim-lsp-settings'
" Plug 'Shougo/deoplete.nvim'
" Plug 'lighttiger2505/deoplete-vim-lsp'

" Markdown
Plug 'dkarter/bullets.vim'
Plug 'junegunn/goyo.vim'

" Web general
Plug 'mattn/emmet-vim'
Plug 'tmhedberg/matchit'

" Vim general
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'francoiscabrol/ranger.vim'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'mhinz/vim-startify'
Plug 'mtth/scratch.vim'
Plug 'gcmt/taboo.vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'vimwiki/vimwiki'

" Below is needed with Ranger
Plug 'rbgrouleff/bclose.vim'

call plug#end()


"""""""""""""""""""""
"		General Settings
"""""""""""""""""""""

" color
set termguicolors
if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

filetype plugin indent on " Enable file detection and load any plugins for them

" Colorscheme
syntax enable
" Gruvbox specifics
let g:gruvbox_italic=1
" modified search based off of gruvbox for readability
hi Search cterm=inverse ctermfg=143 ctermbg=234 gui=bold guifg=#1d2021 guibg=#b8bb26
colorscheme gruvbox

set autoindent " allow autoindent by default
set background=dark
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set clipboard+=unnamedplus " Use the clipboard register + in addition to the default
" Use a popup menu, even if there's one match, show extra info, do not auto-select or auto-insert
set completeopt=menuone,noselect
set diffopt=filler,vertical " Diff settings
set expandtab " maintains # of spaces for a tab in insert mode
set hidden " don't have to write before opening new buffer
set history=50 " command line history
set hlsearch " highlight search terms
set ignorecase " ignore case when searching
set incsearch " show matches as you type
set linebreak " enable word-break without inserting an EOL character
set nobackup " no backups
set nowritebackup " no backups
set nomodeline " For a security thing - https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set noswapfile " no backups
set number " display line number
" set omnifunc=syntaxcomplete#Complete " Enable omnicompletion
set path=$PWD/** " Find from current directory
set ruler " show the cursor position all the time
set shiftwidth=2 " spaces for auto indent
set showcmd " display incomplete commands
set showmatch " show matching parenthesis
set smartcase " search is case-insensitive when keyword is all lowercase
set tabstop=2 " set tab to 2 spaces
set undodir=$HOME/.nvim-undo " undo file for work
set undofile " Save undo's after file closes
set undolevels=1000 " How many undos
set undoreload=1000 " How many lines to save for undo
set updatetime=300

" enable mouse for scrolling
if has("mouse")
	set mouse=a
endif

" nvim specific stuff
if (has("nvim"))
  set inccommand=split " show changes in a split window for search and replace
endif


"""""""""""""""""""""
"		Mappings
"""""""""""""""""""""

" MapLeader
let mapleader = "\<Space>"
let maplocalleader = "\\"

" Easy open, close, and save
nnoremap <Leader>e :e<Space>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :qa<CR>

" Easy window Navigation
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

" Easy copy & paste
noremap <Leader>y "+y
noremap <Leader>p "+p

" Move line by line even when the line is wrapped
noremap j gj
noremap k gk

" Easy window splitting
noremap <Leader>sh :split<CR>
noremap <Leader>sv :vs<CR>
noremap <Leader>st :tab split<CR>

" Easy remove highlighting
noremap <Leader>/ :nohl<CR>

" Easy search for visually selected text
vnoremap // y/<C-R>"<CR>

" Taken from Tim Pope's unimpaired
noremap [b :bprevious<CR>
noremap ]b :bnext<CR>
noremap [t :tabp<CR>
noremap ]t :tabn<CR>


"""""""""""""""""""""
"		Autocommands
"""""""""""""""""""""

" Disable auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Jump to last known position in a file after opening
:au BufReadPost *
 \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
 \ |   exe "normal! g`\""
 \ | endif

" Highlight TODO, FIXME, NOTE
autocmd Syntax * call matchadd('todo', '\W\zs\(TODO\|FIXME\|XXX\)')
autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\)')

" Sync syntax highlighting
" kudos https://vim.fandom.com/wiki/Fix_syntax_highlighting
autocmd BufEnter * :syntax sync fromstart


"""""""""""""""""""""
"		Language specific stuff
"""""""""""""""""""""

" Set .Xmonad-related files to use Haskell syntax highlighting
autocmd BufRead,BufNewFile .xmobarrc set filetype=haskell

" Set JSON-like files to use json syntax highlighting
autocmd BufRead,BufNewFile *.json,.eslintrc,.babelrc set filetype=json

" Javascript / JSX
autocmd FileType javascript,javascript.jsx let b:dispatch = 'npx jest % --colors'
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" JSX
let g:jsx_ext_required = 0

" SQL -- Reset the Omni Key so I can use CTRL-[ to exit insert mode
let g:ftplugin_sql_omni_key = '<C-j>'

" Vue
let g:vue_pre_processors = ['scss', 'typescript']


"""""""""""""""""""""
"		Tools
"""""""""""""""""""""

" Ale
let g:ale_linters = {
      \ 'cucumber': [],
      \ 'javascript': ['eslint', 'tsserver'],
      \ 'typescript': ['eslint', 'tsserver'],
      \ 'typescriptreact': ['eslint', 'tsserver'],
      \ 'vue': ['vls', 'eslint'],
      \}
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'javascript': ['prettier'],
      \ 'typescript': ['prettier'],
      \ 'typescriptreact': ['prettier'],
      \ 'vue': ['prettier'],
      \ 'elixir': ['mix_format']
      \}
let g:ale_fix_on_save = 1
" let g:ale_completion_enabled = 1
nnoremap [a :ALEPreviousWrap<cr>
nnoremap ]a :ALENextWrap<cr>
" nmap gd <Plug>(ale_detail)
" nmap gt <Plug>(ale_go_to_definition)
" nmap gr <Plug>(ale_find_references)
" nmap gh <Plug>(ale_hover)
" set omnifunc=ale#completion#OmniFunc

" Deoplete
" let g:deoplete#enable_at_startup = 1

" Emmet
let g:user_emmet_settings = {
      \'javascript.jsx': {
      \   'extends': 'jsx'
      \}
      \}

" Fugitive - auto-clean fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete

" FZF
nnoremap <Leader>a :Ag<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <C-p> :Files<CR>

" Pangloss Javascript
let g:javascript_plugin_jsdoc = 1

" Lightline
set laststatus=2
let g:lightline = {
      \ 'active': {
      \   'right':  [ [ 'lineinfo' ],
      \               [ 'percent' ] ],
      \   'left': [ [ 'mode', 'paste', 'relativepath' ],
      \             [ 'fugitive', 'readonly', 'modified' ] ]
      \ },
      \ 'colorscheme': 'one',
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'readonly': 'LightLineReadonly',
      \   'modified': 'LightLineModified'
      \ }
      \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "тнд"
  else
    return ""
  endif
endfunction

function! LightLineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

" LSP -- defined in nvim config
" nmap gtd <Plug>(lsp-definition)
" nmap gtt <Plug>(lsp-type-definition)
" nmap gtptd <Plug>(lsp-peek-type-definition)
" nmap gth <Plug>(lsp-hover)
" nmap gtr <Plug>(lsp-references)
" nmap gf <Plug>(lsp-document-format)
" nmap [j <Plug>(lsp-next-diagnostic)
" nmap ]j <Plug>(lsp-previous-diagnostic)
" " autocmd BufWritePre <buffer> LspDocumentFormatSync
" " let g:lsp_format_sync_timeout = 1000
" let g:lsp_log_file = expand('~/vim-lsp.log')
" set omnifunc=lsp#complete

" Rainbow Parenthesis
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

" Ranger
let g:ranger_command_override = 'ranger --cmd "set show_hidden=true"'
let g:ranger_replace_netrw = 1

" Startify
let g:startify_bookmarks = [
      \ {'w': '~/vimwiki/index.md'},
      \ {'m': '~/dotfiles/my_wiki/index.md'},
      \ {'z': '~/dotfiles/meine_zettlekasten/index.md'},
      \ ]

" UltiSnips
" let g:UltiSnipsExpandTrigger="<c-e>"
" let g:UltiSnipsJumpForwardTrigger="<c-n>"
" let g:UltiSnipsJumpBackwardTrigger="<c-p>"

" Vimwiki
let g:vimwiki_list = [
      \ {'path': '~/vimwiki', 'syntax': 'markdown', 'ext': '.md'},
      \ {'path': '~/dotfiles/my_wiki', 'syntax': 'markdown', 'ext': '.md'},
      \ {'path': '~/dotfiles/meine_zettlekasten', 'syntax': 'markdown', 'ext': '.md', 'auto_tags': 1}
      \]
let g:vimwiki_global_ext = 0
let g:vimwiki_ex2syntaqx = {'.md': 'markdown'}
" nmap <Leader>x :VimwikiToggleListItem<CR>
